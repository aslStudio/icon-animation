@mixin newFont($family,$pathName,$weight, $style: normal) {
    @font-face {
        font-family: '#{$family}';
        src: url('../fonts/#{$pathName}.woff2') format('woff2'), url('../fonts/#{$pathName}.woff') format('woff');
        font-weight: #{$weight};
        font-style: $style;
        font-display: swap;
    }
}

@mixin fontSize($name, $options:()) {
    @each $tagName, $tagValue in $tags {
        @if $tagName == $name {
            @if nth(map-get($tags, $tagName), 1) == nth(map-get($tags, $tagName), 2) and nth(map-get($tags, $tagName), 1) == nth(map-get($tags, $tagName), 3) {
                font-size: nth(map-get($tags, $tagName), 1);
            }

            @else if nth(map-get($tags, $tagName), 1) == nth(map-get($tags, $tagName), 2) {
                @media (max-width: $maxTablet) {
                    font-size: nth(map-get($tags, $tagName), 1);
                }

                @media (min-width: $desktop) {
                    font-size: nth(map-get($tags, $tagName), 3);
                }
            }

            @else if nth(map-get($tags, $tagName), 2) == nth(map-get($tags, $tagName), 3) {
                @media (max-width: $maxMobileLate) {
                    font-size: nth(map-get($tags, $tagName), 1);
                }

                @media (min-width: $tabletLate) {
                    font-size: nth(map-get($tags, $tagName), 2);
                }
            }

            @else {
                @media (max-width: $maxMobileLate) {
                    font-size: nth(map-get($tags, $tagName), 1);
                }

                @media (min-width: $tabletLate) and (max-width: $maxTablet) {
                    font-size: nth(map-get($tags, $tagName), 2);
                }

                @media (min-width: $desktop) {
                    font-size: nth(map-get($tags, $tagName), 3);
                }
            }

            @if length(nth(map-get($tags, $tagName), 4)) > 1 {
                @media (max-width: $maxMobileLate) {
                    line-height: nth(nth(map-get($tags, $tagName), 4), 1);
                }

                @media (min-width: $tabletLate) and (max-width: $desktop) {
                    line-height: nth(nth(map-get($tags, $tagName), 4), 2);
                }

                @media (min-width: $desktop) {
                    line-height: nth(nth(map-get($tags, $tagName), 4), 3);
                }
            }

            @else {
                line-height: nth(map-get($tags, $tagName), 4);
            }

            @if map-get($options, weight) {
                font-weight: #{map-get($options, weight)};
            }

            @if map-get($options, style) {
                font-style: map-get($options, style);
            }

            @if map-get($options, mono) {
                @include mono-space;
            }
        }
    }
}

@mixin ellipsis {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 100%;
}

@mixin center($position:'both') {
    position: absolute;

    @if $position == 'vertical' {
        top: 50%;
        transform: translateY(-50%);
    }

    @else if $position == 'horizontal' {
        left: 50%;
        transform: translateX(-50%);
    }

    @else if $position == 'both' {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    @else if $position == 'stretch' {
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
}